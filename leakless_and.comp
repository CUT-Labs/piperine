declare component leakless_and(l): AB + CD -> F

### Domains
# Subdomains:
# sequence ah1 = "<0>H"
# sequence ah2 = "<0>H"
sequence a1 = "<l>H"
sequence a2 = "<l>H"
sequence a3 = "<l>H"
sequence b1 = "<l>H"
sequence b2 = "<l>H"
sequence b3 = "<l>H"
# sequence ch1 = "<0>H"
# sequence ch2 = "<0>H"
sequence c1 = "<l>H"
sequence c2 = "<l>H"
sequence c3 = "<l>H"
sequence d1 = "<l>H"
sequence d2 = "<l>H"
sequence d3 = "<l>H"

### I/O connectors
sequence AB = b3 b2 b1 a3 a2 a1 #ah2 ah1
sequence CD = d3 d2 d1 c3 c2 c1 #ch2 ch1
sequence F = d2 d1 c3 c2 c1 b3 b2 b1 a3 a2

### Strands
strand ab = b3 b2 b1 a3 a2 a1 #ah2 ah1
strand cd = d3 d2 d1 c3 c2 c1 #ch2 ch1
strand f = d2 d1 c3 c2 c1 b3 b2 b1 a3 a2
strand and_bot = a1* a2* a3* b1* b2* b3* c1* c2* c3* d1* d2* d3*

### Structures
# Single-stranded:
structure AB = ab : domain ......
structure CD = cd : domain ......
structure F = f : domain ..........

# Gates:
structure And = and_bot + f : domain .((((((((((.+))))))))))

# Waste products:
structure And_Waste = and_bot + cd + ab : domain ((((((((((((+))))))+))))))

### Reactions
kinetic And + AB + CD -> F + And_Waste
