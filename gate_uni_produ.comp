declare component gate_uni_produ(t, bm, c): Out -> C

### Domains
# Toeholds:
sequence toe-sb = "<t>H"
sequence toe-fc = "<t>H"
sequence toe-sc = "<t>H"

# Branch migration domains:
sequence bm  = "<bm - c>H"
sequence cm  = "<bm - c>H"
sequence ch = "C<bm - c - 1>H"
sequence dh = "C<bm - c - 1>H"

# Clamps:
sequence cbm  = "W<c-1>C"
sequence ccm  = "W<c-1>C"
sequence cch = "C<c-1>W"
sequence cdm  = "W<c-1>C"
sequence cdh = "C<c-1>W"

### I/O connectors
sequence Out = ch cch toe-sb bm cbm
sequence C = toe-sc cm ccm toe-fc ch cch

### Strands
strand out = ch cch toe-sb bm cbm
strand c = toe-sc cm ccm toe-fc ch cch
strand d = cdm toe-fc dh cdh
strand helper = toe-fc dh cdh toe-fc
strand cat_helper = toe-fc dh cdh toe-fc ch cch
strand trans_base = toe-sb* cch* ch* toe-fc* cdh* dh* toe-fc* cdm*

### Structures
# Single-stranded:
structure Out = out : domain .....
structure C = c : domain ......
structure D = d : domain ....
structure Helper = helper : domain ....
structure Cat_Helper = cat_helper : domain ......

# Gates:
structure Trans = trans_base + d + c : domain .(((((((+))))+...)))

# Gate intermediates:
structure Trans_int = trans_base + d + out : domain (((.((((+))))+)))..

# Waste products:
structure Trans_waste = trans_base + helper + out : domain (((((((.+))))+)))..
structure Trans_cat_waste = trans_base + cat_helper : domain .((((((.+))))))

### Reactions
kinetic Out + Trans -> Trans_int + C
kinetic Helper + Trans_int -> Trans_waste + D
kinetic Cat_Helper + Trans_int -> Trans_cat_waste + D + Out
