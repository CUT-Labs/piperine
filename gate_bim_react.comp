declare component gate_bim_react(t, bm, c): A + B -> Out

### Domains
# Toeholds:
sequence toe-fa = "<t>H"
sequence toe-sa = "<t>H"
sequence toe-fb-suffix = "<t - 1>H"
sequence toe-fb-prefix = "H"
sequence toe-sb = "<t>H"
# For clarity, full fb toehold
sequence toe-fb = toe-fb-suffix toe-fb-prefix

# Branch migration domains:
sequence am  = "<bm - c>H"
sequence bm  = "<bm - c>H"
sequence ch = "C<bm - c - 1>H"

# Clamps:
sequence cam  = "W<c-1>C"
sequence cbm  = "W<c-1>C"
sequence cch = "C<c-1>W"

### I/O connectors
sequence A = toe-sa am cam toe-fa
sequence B = toe-sb bm cbm toe-fb-suffix toe-fb-prefix
sequence Out = ch cch toe-sb bm cbm

### Strands
strand a = toe-sa am cam toe-fa
strand b = toe-sb bm cbm toe-fb-suffix toe-fb-prefix
strand backward = toe-fb-suffix toe-sa am cam
strand gate_base = toe-fa* cam* am* toe-sa* toe-fb-suffix* cbm* bm* toe-sb* cch*
strand out = ch cch toe-sb bm cbm

### Structures
# Single-stranded:
structure A = a : domain ....
structure B = b : domain .....
structure Backward = backward : domain ....
structure Out = out : domain .....

# Gates:
structure Gate = gate_base + out + backward : domain .((((((((+.))))+))))

# Gate intermediates:
structure Gate_int = gate_base + out + a : domain ((((.((((+.))))+))))

# Waste products:
structure Gate_waste = gate_base + b + a : domain ((((((((.+)))).+))))

### Reactions
kinetic A + Gate -> Gate_int + Backward
kinetic Gate_int + Backward -> A + Gate
kinetic B + Gate_int -> Gate_waste + Out
