declare component leakless_translate(l): AB -> CD

### Domains
# Subdomains:
# sequence ah1 = "<0>H"
# sequence ah2 = "<0>H"
sequence a1 = "<l>H"
sequence a2 = "<l>H"
sequence a3 = "<l>H"
sequence b1 = "<l>H"
sequence b2 = "<l>H"
sequence b3 = "<l>H"
sequence c1 = "<l>H"
sequence c2 = "<l>H"
sequence c3 = "<l>H"
sequence d1 = "<l>H"
sequence d2 = "<l>H"
sequence d3 = "<l>H"

### I/O connectors
sequence AB = b3 b2 b1 a3 a2 a1 #ah2 ah1
sequence CD = d3 d2 d1 c3 c2 c1 b3 b2

### Strands
strand ab = b3 b2 b1 a3 a2 a1 #ah2 ah1
strand cd = d3 d2 d1 c3 c2 c1 b3 b2
strand t1_top = c3 c2 c1 b3 b2 b1 a3 a2
strand t1_base = a1* a2* a3* b1* b2* b3*
strand t2_base = b1* b2* b3* c1* c2* c3*

### Structures
# Single-stranded:
structure AB = ab : domain ......
structure CD = cd : domain ........
structure T1_Top = t1_top : domain ........

# Gates:
structure T1 = t1_base + t1_top : domain .(((((+...)))))
structure T2 = t2_base + cd : domain .(((((+...)))))

# Waste products:
structure T1_Waste = t1_base + ab : domain ((((((+))))))
structure T2_Waste = t2_base + t1_top : domain ((((((+))))))..

### Reactions
kinetic AB + T1 -> T1_Top + T1_Waste
kinetic T1_Top + T2 -> CD + T2_Waste
